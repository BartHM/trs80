                        ; Calling convention used in this program
                        ; ---------------------------------------
                        ;
                        ; Unless otherwise noted, the first parameter, and the return value are stored as follows:
                        ; 8 bits: L
                        ; 16 bits: HL
                        ; 32 bits: DEHL
                        ;
                        ; Additional parameters are passed on the stack, left-to-right.
                        ; Parameters and return values larger than 32 bits are passed on the stack (return value
                        ; space set up by caller as a hidden first argument).
                        ; Callee saves/restores any modified registers.
                        ; Caller pops arguments after call returns.
                        ; AF registers are scratch (caller preserves, if needed).
                        
                        ; To do:
                        ; - Consider making everything case-insensitive since lower case is not the default on TRS-80.
                        ; - Parse hex more permissively.
                        ;     - At least parse arbitrary decimal.
                        ;     - Bonus: Parse 0x prefix, $ prefix (hex), % prefix (binary).
                        
                        ; same as 'rom', except that the default fill byte for 'defs' etc. is 0x00
                        #target bin
                        
                        #include "z80.inc"
                        ; Macros and definitions related to the Z80 and its instruction set
                        
                        M_deref_hl	macro
                            ; hl = (hl)
                            ; destroys A
                            ld	    a, (hl)
                            inc	    hl
                            ld	    h, (hl)
                            ld	    l, a
                            endm
                        
                        M_out		macro port, val
                            ; destroys A
                            ld	    a, &val
                            out	    &port, a
                            endm
                        
                        M_out0		macro port
                            ; destroys A
                            xor	    a
                            out	    &port, a
                            endm
                        
                        #include "ascii.inc"
                        NUL	equ 0x00
                        SOH	equ 0x01
                        EOT	equ 0x04
                        ACK	equ 0x06
                        BEL	equ 0x07
                        ; Unfortunately, the BASIC interpreter uses "BS" to mean "Bad subscript", and it has value $10, so
                        ; we need to use something different here.
                        ASC_BS	equ 0x08
                        HT	equ 0x09
                        LF	equ 0x0A
                        CR	equ 0x0D
                        NAK	equ 0x15
                        ESC	equ 0x1B
                        
                        
                        FORTH_RSTACK_SIZE   equ   256
                        FORTH_PSTACK_SIZE   equ   256
                        FORTH_CODE_SIZE     equ   16384
                        
                        KEY_ENTER           equ   13
                        KEY_BS              equ   8
                        
                        ; Add a call to the function to the code pointed to by HL.
                        M_forth_add_code macro func
                            ld      (hl), lo(&func)
                            inc     hl
                            ld      (hl), hi(&func)
                            inc     hl
                            endm
                        
                        ; #if defined(LOAD_LOW)
                        ; ; Our code loads at address 0, with the full address space mapped to RAM.
                        ; #code TEXT,0
                        ; #else
                        ; ; Our code loads immediately above the 16K ROM page
                        ; #code TEXT,0x4000
                        ; #endif
                            org 0x8000
                        
                        ; Careful, don't put anything before "init", as this is the entry point to our code.
                        ; When we are loaded at address 0, this is where "RST 0" sends us.
                        #local
                        init::
8000: F3                    di
                            ; zero the DATA segment
8001: 21 01 8F              ld	    hl, DATA
8004: 01 9E 42              ld	    bc, DATA_size
8007: CD 5E 8E              call    bzero
                        
800A: CD F2 8E              call    rand_init		    ; seed RNG
800D: 21 2D 80              ld	    hl, hello_message	    ; print welcome banner
8010: CD A6 8E              call    print
8013: CD 73 80              call    forth_init		    ; initialize Forth environment
8016: CD B7 8E              call    print_newline
                        loop:
8019: CD 1F 88              call    forth_dump_pstack       ; stack and prompt
801C: 21 70 80              ld	    hl, prompt
801F: CD A6 8E              call    print
8022: CD 15 8E              call    gets                    ; get a line of code
8025: 21 01 8F              ld      hl, Gets_buffer
8028: CD 4B 88              call    forth_parse_line
802B: 18 EC                 jr      loop
                        hello_message:
802D: 54 52 53 2D           .text   "TRS-80 Forth Compiler", CR
8031: 38 30 20 46
8035: 6F 72 74 68
8039: 20 43 6F 6D
803D: 70 69 6C 65
8041: 72 0D
8043: 28 63 29 20           .text   "(c) 2021 Lawrence Kesteloot", CR
8047: 32 30 32 31
804B: 20 4C 61 77
804F: 72 65 6E 63
8053: 65 20 4B 65
8057: 73 74 65 6C
805B: 6F 6F 74 0D
805F: 0D                    .text   CR
8060: 49 6E 69 74           .text   "Initializing...", NUL
8064: 69 61 6C 69
8068: 7A 69 6E 67
806C: 2E 2E 2E 00
                        prompt:
8070: 3E 20 00              .text   "> ", NUL
                        #endlocal
                        
                        ; void forth_init()
                        ; - initializes the Forth interpreter/compiler.
                        ; - Notes:
                        ;   - We're using Direct Threaded Code (DTC).
                        ;   - Machine register allocation:
                        ;       - BC: TOS (top of stack)
                        ;       - DE: IP (instruction to decode next)
                        ;       - HL: W (working register)
                        ;       - IX: RSP (return stack pointer)
                        ;       - SP: PSP (parameter stack pointer)
                        forth_init::
8073: E5                    push    hl
                        
                            ; Set up parameter stack. Note that it must always have at least
                            ; one item because the first thing we do is pop it off and stick
                            ; it into BC.
8074: 21 9B D1              ld      hl, Forth_pstack+FORTH_PSTACK_SIZE
8077: 2B                    dec     hl
8078: 36 00                 ld      (hl), 0x00
807A: 2B                    dec     hl
807B: 36 00                 ld      (hl), 0x00
807D: 22 6B 8F              ld      (Forth_psp), hl
                        
                            ; Set the head of the dictionary linked list.
8080: CD B8 8D              call    forth_init_dict
                        
                            ; Start in immediate mode. This is a two-byte variable so that it
                            ; can be accessed from Forth, but throughout this code we only
                            ; access its first (lower) byte.
8083: 21 00 00              ld      hl, 0
8086: 22 6F 8F              ld      (Forth_compiling), hl
                        
                            ; Default to hex for printing.
8089: 21 10 00              ld      hl, 16
808C: 22 79 8F              ld      (Forth_base), hl
                        
                            ; Program is infinite loop to interpret words.
808F: 21 9B 8F              ld      hl, Forth_code
                            M_forth_add_code forth_interpret
8092: 36 31                 ld      (hl), lo(forth_interpret)
8094: 23                    inc     hl
8095: 36 8D                 ld      (hl), hi(forth_interpret)
8097: 23                    inc     hl
                            M_forth_add_code forth_native_branch
8098: 36 C2                 ld      (hl), lo(forth_native_branch)
809A: 23                    inc     hl
809B: 36 8B                 ld      (hl), hi(forth_native_branch)
809D: 23                    inc     hl
                            M_forth_add_code -4
809E: 36 FC                 ld      (hl), lo(-4)
80A0: 23                    inc     hl
80A1: 36 FF                 ld      (hl), hi(-4)
80A3: 23                    inc     hl
                        
                            ; Set up HERE pointer.
80A4: 22 69 8F              ld      (Forth_here), hl
                        
                            ; Define some built-ins.
80A7: 21 AF 80              ld      hl, Forth_init_cmd
80AA: CD 4B 88              call    forth_parse_line
                        
80AD: E1                    pop     hl
80AE: C9                    ret
                        
                        Forth_init_cmd:
80AF: 3A 20 2F 20       #insert "init.fs"
80B3: 2F 6D 6F 64
80B7: 20 73 77 61
80BB: 70 20 64 72
80BF: 6F 70 20 3B
80C3: 0A 3A 20 6D
80C7: 6F 64 20 2F
80CB: 6D 6F 64 20
80CF: 64 72 6F 70
80D3: 20 3B 0A 3A
80D7: 20 32 64 75
80DB: 70 20 6F 76
80DF: 65 72 20 6F
80E3: 76 65 72 20
80E7: 3B 0A 3A 20
80EB: 69 66 20 69
80EF: 6D 6D 65 64
80F3: 69 61 74 65
80F7: 20 27 20 30
80FB: 62 72 61 6E
80FF: 63 68 20 2C
8103: 20 68 65 72
8107: 65 20 40 20
810B: 30 30 30 30
810F: 20 2C 20 3B
8113: 0A 3A 20 74
8117: 68 65 6E 20
811B: 69 6D 6D 65
811F: 64 69 61 74
8123: 65 20 64 75
8127: 70 20 68 65
812B: 72 65 20 40
812F: 20 73 77 61
8133: 70 20 2D 20
8137: 73 77 61 70
813B: 20 21 20 3B
813F: 0A 3A 20 65
8143: 6C 73 65 20
8147: 69 6D 6D 65
814B: 64 69 61 74
814F: 65 20 27 20
8153: 62 72 61 6E
8157: 63 68 20 2C
815B: 20 68 65 72
815F: 65 20 40 20
8163: 30 30 30 30
8167: 20 2C 20 73
816B: 77 61 70 20
816F: 64 75 70 20
8173: 68 65 72 65
8177: 20 40 20 73
817B: 77 61 70 20
817F: 2D 20 73 77
8183: 61 70 20 21
8187: 20 3B 0A 3A
818B: 20 62 65 67
818F: 69 6E 20 69
8193: 6D 6D 65 64
8197: 69 61 74 65
819B: 20 68 65 72
819F: 65 20 40 20
81A3: 3B 0A 3A 20
81A7: 75 6E 74 69
81AB: 6C 20 69 6D
81AF: 6D 65 64 69
81B3: 61 74 65 20
81B7: 27 20 30 62
81BB: 72 61 6E 63
81BF: 68 20 2C 20
81C3: 68 65 72 65
81C7: 20 40 20 2D
81CB: 20 2C 20 3B
81CF: 0A 3A 20 61
81D3: 67 61 69 6E
81D7: 20 69 6D 6D
81DB: 65 64 69 61
81DF: 74 65 20 27
81E3: 20 62 72 61
81E7: 6E 63 68 20
81EB: 2C 20 68 65
81EF: 72 65 20 40
81F3: 20 2D 20 2C
81F7: 20 3B 0A 3A
81FB: 20 77 68 69
81FF: 6C 65 20 69
8203: 6D 6D 65 64
8207: 69 61 74 65
820B: 20 27 20 30
820F: 62 72 61 6E
8213: 63 68 20 2C
8217: 20 68 65 72
821B: 65 20 40 20
821F: 30 30 30 30
8223: 20 2C 20 3B
8227: 0A 3A 20 72
822B: 65 70 65 61
822F: 74 20 69 6D
8233: 6D 65 64 69
8237: 61 74 65 20
823B: 27 20 62 72
823F: 61 6E 63 68
8243: 20 2C 20 73
8247: 77 61 70 20
824B: 68 65 72 65
824F: 20 40 20 2D
8253: 20 2C 20 64
8257: 75 70 20 68
825B: 65 72 65 20
825F: 40 20 73 77
8263: 61 70 20 2D
8267: 20 73 77 61
826B: 70 20 21 20
826F: 3B 0A 3A 20
8273: 6E 6F 74 20
8277: 69 66 20 30
827B: 30 30 30 20
827F: 65 6C 73 65
8283: 20 30 30 30
8287: 31 20 74 68
828B: 65 6E 20 3B
828F: 0A 3A 20 3C
8293: 3D 20 32 64
8297: 75 70 20 3C
829B: 20 2D 72 6F
829F: 74 20 3D 20
82A3: 6F 72 20 3B
82A7: 0A 3A 20 3E
82AB: 20 3C 3D 20
82AF: 6E 6F 74 20
82B3: 3B 0A 3A 20
82B7: 3E 3D 20 3C
82BB: 20 6E 6F 74
82BF: 20 3B 0A 3A
82C3: 20 3C 3E 20
82C7: 3D 20 6E 6F
82CB: 74 20 3B 0A
82CF: 3A 20 73 70
82D3: 61 63 65 20
82D7: 30 30 32 30
82DB: 20 65 6D 69
82DF: 74 20 3B 0A
82E3: 3A 20 77 6F
82E7: 72 64 73 20
82EB: 6C 61 74 65
82EF: 73 74 20 40
82F3: 20 62 65 67
82F7: 69 6E 20 3F
82FB: 64 75 70 20
82FF: 77 68 69 6C
8303: 65 20 64 75
8307: 70 20 30 30
830B: 30 33 20 2B
830F: 20 74 65 6C
8313: 6C 20 73 70
8317: 61 63 65 20
831B: 40 20 72 65
831F: 70 65 61 74
8323: 20 63 72 20
8327: 3B 0A 3A 20
832B: 72 65 63 75
832F: 72 73 65 20
8333: 69 6D 6D 65
8337: 64 69 61 74
833B: 65 20 6C 61
833F: 74 65 73 74
8343: 20 40 20 3E
8347: 63 66 61 20
834B: 2C 20 3B 0A
834F: 3A 20 64 65
8353: 63 69 6D 61
8357: 6C 20 30 30
835B: 30 61 20 62
835F: 61 73 65 20
8363: 21 20 3B 0A
8367: 3A 20 68 65
836B: 78 20 30 30
836F: 31 30 20 62
8373: 61 73 65 20
8377: 21 20 3B 0A
837B: 3A 20 75 2E
837F: 20 62 61 73
8383: 65 20 40 20
8387: 2F 6D 6F 64
838B: 20 3F 64 75
838F: 70 20 69 66
8393: 20 72 65 63
8397: 75 72 73 65
839B: 20 74 68 65
839F: 6E 20 64 75
83A3: 70 20 30 30
83A7: 30 61 20 3C
83AB: 20 69 66 20
83AF: 30 30 33 30
83B3: 20 65 6C 73
83B7: 65 20 30 30
83BB: 30 61 20 2D
83BF: 20 30 30 34
83C3: 31 20 74 68
83C7: 65 6E 20 2B
83CB: 20 65 6D 69
83CF: 74 20 3B 0A
83D3: 3A 20 6E 69
83D7: 70 20 73 77
83DB: 61 70 20 64
83DF: 72 6F 70 20
83E3: 3B 20 5C 20
83E7: 28 20 78 20
83EB: 79 20 2D 2D
83EF: 20 79 20 29
83F3: 0A 3A 20 74
83F7: 75 63 6B 20
83FB: 73 77 61 70
83FF: 20 6F 76 65
8403: 72 20 3B 20
8407: 5C 20 28 78
840B: 20 79 20 2D
840F: 2D 20 79 20
8413: 78 20 79 20
8417: 29 0A 3A 20
841B: 31 2B 20 30
841F: 30 30 31 20
8423: 2B 20 3B 0A
8427: 3A 20 70 69
842B: 63 6B 20 5C
842F: 20 28 20 78
8433: 5F 75 20 2E
8437: 2E 2E 20 78
843B: 5F 31 20 78
843F: 5F 30 20 75
8443: 20 2D 2D 20
8447: 78 5F 75 20
844B: 2E 2E 2E 20
844F: 78 5F 31 20
8453: 78 5F 30 20
8457: 78 5F 75 20
845B: 29 0A 20 20
845F: 20 20 31 2B
8463: 20 5C 20 61
8467: 64 64 20 6F
846B: 6E 65 20 62
846F: 65 63 61 75
8473: 73 65 20 6F
8477: 66 20 27 75
847B: 27 20 6F 6E
847F: 20 74 68 65
8483: 20 73 74 61
8487: 63 6B 0A 20
848B: 20 20 20 30
848F: 30 30 32 20
8493: 2A 20 5C 20
8497: 6D 75 6C 74
849B: 69 70 6C 79
849F: 20 62 79 20
84A3: 74 68 65 20
84A7: 77 6F 72 64
84AB: 20 73 69 7A
84AF: 65 0A 20 20
84B3: 20 20 64 73
84B7: 70 40 20 2B
84BB: 20 5C 20 61
84BF: 64 64 20 74
84C3: 6F 20 74 68
84C7: 65 20 73 74
84CB: 61 63 6B 20
84CF: 70 6F 69 6E
84D3: 74 65 72 0A
84D7: 20 20 20 20
84DB: 40 20 5C 20
84DF: 61 6E 64 20
84E3: 66 65 74 63
84E7: 68 0A 3B 0A
84EB: 3A 20 63 6F
84EF: 6E 73 74 61
84F3: 6E 74 20 77
84F7: 6F 72 64 20
84FB: 63 72 65 61
84FF: 74 65 20 27
8503: 20 65 6E 74
8507: 65 72 20 2C
850B: 20 27 20 6C
850F: 69 74 20 2C
8513: 20 2C 20 27
8517: 20 65 78 69
851B: 74 20 2C 20
851F: 3B 20 5C 20
8523: 64 65 66 69
8527: 6E 65 20 61
852B: 20 63 6F 6E
852F: 73 74 61 6E
8533: 74 0A 3A 20
8537: 76 61 72 69
853B: 61 62 6C 65
853F: 20 68 65 72
8543: 65 20 40 20
8547: 30 30 30 30
854B: 20 2C 20 77
854F: 6F 72 64 20
8553: 63 72 65 61
8557: 74 65 20 27
855B: 20 65 6E 74
855F: 65 72 20 2C
8563: 20 27 20 6C
8567: 69 74 20 2C
856B: 20 2C 20 27
856F: 20 65 78 69
8573: 74 20 2C 20
8577: 3B 20 5C 20
857B: 64 65 66 20
857F: 61 20 76 61
8583: 72 0A 0A 3A
8587: 20 72 78 20
858B: 67 66 78 5F
858F: 77 69 64 74
8593: 68 20 72 6E
8597: 64 6E 20 3B
859B: 0A 3A 20 72
859F: 79 20 67 66
85A3: 78 5F 68 65
85A7: 69 67 68 74
85AB: 20 72 6E 64
85AF: 6E 20 3B 0A
85B3: 5C 20 3A 20
85B7: 72 6C 20 72
85BB: 78 20 72 79
85BF: 20 72 78 20
85C3: 72 79 20 6C
85C7: 69 6E 65 20
85CB: 3B 0A 5C 20
85CF: 3A 20 72 63
85D3: 20 72 6E 64
85D7: 20 72 6E 64
85DB: 20 72 6E 64
85DF: 20 63 6F 6C
85E3: 6F 72 20 3B
85E7: 0A 5C 20 3A
85EB: 20 64 65 6D
85EF: 6F 20 62 65
85F3: 67 69 6E 20
85F7: 72 63 20 72
85FB: 6C 20 61 67
85FF: 61 69 6E 20
8603: 3B 0A 0A 5C
8607: 20 4D 79 20
860B: 6F 77 6E 20
860F: 61 72 72 61
8613: 79 20 77 6F
8617: 72 64 73 2E
861B: 0A 3A 20 61
861F: 72 72 61 79
8623: 20 68 65 72
8627: 65 20 40 20
862B: 64 75 70 20
862F: 72 6F 74 20
8633: 30 30 30 32
8637: 20 2A 20 2B
863B: 20 68 65 72
863F: 65 20 21 20
8643: 77 6F 72 64
8647: 20 63 72 65
864B: 61 74 65 20
864F: 27 20 65 6E
8653: 74 65 72 20
8657: 2C 20 27 20
865B: 6C 69 74 20
865F: 2C 20 2C 20
8663: 27 20 65 78
8667: 69 74 20 2C
866B: 20 3B 20 5C
866F: 20 64 65 66
8673: 20 61 6E 20
8677: 61 72 72 61
867B: 79 2C 20 73
867F: 70 65 63 69
8683: 66 79 20 73
8687: 69 7A 65 20
868B: 69 6E 20 65
868F: 6C 65 6D 65
8693: 6E 74 73 0A
8697: 3A 20 61 5B
869B: 5D 20 73 77
869F: 61 70 20 30
86A3: 30 30 32 20
86A7: 2A 20 2B 20
86AB: 3B 20 5C 20
86AF: 28 20 69 6E
86B3: 64 65 78 20
86B7: 61 72 72 61
86BB: 79 20 2D 2D
86BF: 20 61 64 64
86C3: 72 65 73 73
86C7: 20 29 0A 3A
86CB: 20 61 40 20
86CF: 61 5B 5D 20
86D3: 40 20 3B 20
86D7: 5C 20 28 20
86DB: 69 6E 64 65
86DF: 78 20 61 72
86E3: 72 61 79 20
86E7: 2D 2D 20 76
86EB: 61 6C 75 65
86EF: 20 29 0A 3A
86F3: 20 61 21 20
86F7: 61 5B 5D 20
86FB: 21 20 3B 20
86FF: 5C 20 28 20
8703: 76 61 6C 75
8707: 65 20 69 6E
870B: 64 65 78 20
870F: 61 72 72 61
8713: 79 20 2D 2D
8717: 20 29 0A 3A
871B: 20 40 6C 6F
871F: 77 20 40 20
8723: 30 30 46 46
8727: 20 61 6E 64
872B: 20 3B 0A 3A
872F: 20 40 68 69
8733: 67 68 20 40
8737: 20 38 3E 3E
873B: 20 3B 0A 3A
873F: 20 21 6C 6F
8743: 77 20 64 75
8747: 70 20 40 20
874B: 46 46 30 30
874F: 20 61 6E 64
8753: 20 72 6F 74
8757: 20 30 30 46
875B: 46 20 61 6E
875F: 64 20 6F 72
8763: 20 73 77 61
8767: 70 20 21 20
876B: 3B 0A 3A 20
876F: 21 68 69 67
8773: 68 20 64 75
8777: 70 20 40 20
877B: 30 30 46 46
877F: 20 61 6E 64
8783: 20 72 6F 74
8787: 20 38 3C 3C
878B: 20 6F 72 20
878F: 73 77 61 70
8793: 20 21 20 3B
8797: 0A 3A 20 61
879B: 40 6C 6F 77
879F: 20 61 5B 5D
87A3: 20 40 6C 6F
87A7: 77 20 3B 0A
87AB: 3A 20 61 40
87AF: 68 69 67 68
87B3: 20 61 5B 5D
87B7: 20 40 68 69
87BB: 67 68 20 3B
87BF: 0A 3A 20 61
87C3: 21 6C 6F 77
87C7: 20 61 5B 5D
87CB: 20 21 6C 6F
87CF: 77 20 3B 20
87D3: 5C 20 28 20
87D7: 76 61 6C 75
87DB: 65 20 69 6E
87DF: 64 65 78 20
87E3: 61 72 72 61
87E7: 79 20 2D 2D
87EB: 20 29 0A 3A
87EF: 20 61 21 68
87F3: 69 67 68 20
87F7: 61 5B 5D 20
87FB: 21 68 69 67
87FF: 68 20 3B 20
8803: 5C 20 28 20
8807: 76 61 6C 75
880B: 65 20 69 6E
880F: 64 65 78 20
8813: 61 72 72 61
8817: 79 20 2D 2D
881B: 20 29 0A
881E: 00                    .text   NUL
                        
                        ; void forth_dump_pstack()
                        ; - dump the parameter stack contents to the console.
                        #local
                        forth_dump_pstack::
881F: E5                    push    hl
8820: C5                    push    bc
8821: D5                    push    de
                        
                            ; Start at the bottom of the stack.
8822: 21 9B D1              ld      hl, Forth_pstack+FORTH_PSTACK_SIZE
8825: ED 4B 6B 8F           ld      bc, (Forth_psp)
                        
                        loop:
                            ; See if we're done.
8829: B7                    or      a           ; Clear carry.
882A: ED 42                 sbc     hl, bc
882C: 09                    add     hl, bc
882D: 28 18                 jr      z, done
                        
882F: 2B                    dec     hl
8830: 2B                    dec     hl
                        
                            ; Print (HL).
8831: 54 5D                 ld      de, hl      ; Save/restore HL.
8833: 7E                    ld      a, (hl)     ; Dereference HL.
8834: 23                    inc     hl
8835: 66                    ld      h, (hl)
8836: 6F                    ld      l, a
8837: CD 4A 8E              call    lcd_puthex16
883A: 62 6B                 ld      hl, de
                        
                            ; Write space.
883C: 54 5D                 ld      de, hl      ; Save/restore L.
883E: 2E 20                 ld      l, ' '
8840: CD BF 8E              call    putc_l
8843: 62 6B                 ld      hl, de
                        
8845: 18 E2                 jr      loop
                        
                        done:
8847: D1                    pop     de
8848: C1                    pop     bc
8849: E1                    pop     hl
884A: C9                    ret
                        #endlocal
                        
                        ; void forth_parse_line(uint8_t *buffer (HL))
                        ; - parse the gets input buffer line.
                        #local
                        forth_parse_line::
884B: E5                    push    hl
884C: C5                    push    bc
884D: D5                    push    de
884E: DD E5                 push    ix
8850: FD E5                 push    iy
                        
                            ; Reset input pointer to start of buffer.
8852: 22 6D 8F              ld      (Forth_input), hl
                        
                            ; We use the Z80 stack for parameters, so save our SP so we can restore it
                            ; and return to our caller even if the Forth program left junk on the
                            ; parameter stack.
8855: 21 00 00              ld      hl, 0
8858: 39                    add     hl, sp
8859: 22 65 8F              ld      (Forth_orig_sp), hl
                        
                            ; Take over the Z80 stack for our parameter stack.
885C: 2A 6B 8F              ld      hl, (Forth_psp)
885F: F9                    ld      sp, hl
8860: C1                    pop     bc
                        
                            ; Set up return stack.
8861: DD 21 9B D0           ld      ix, Forth_rstack+FORTH_RSTACK_SIZE
                        
                            ; Set up IP.
8865: 11 9B 8F              ld      de, Forth_code
                        
                            ; Start the program.
8868: C3 7F 88              jp      forth_next
                        
                            ; Restore the SP from Forth_orig_sp before jumping here:
                        forth_parse_line_terminate::
                            ; Save our own stack pointer.
886B: C5                    push    bc
886C: 21 00 00              ld      hl, 0
886F: 39                    add     hl, sp
8870: 22 6B 8F              ld      (Forth_psp), hl
                        
                            ; Restore the original stack pointer.
8873: 2A 65 8F              ld      hl, (Forth_orig_sp)
8876: F9                    ld      sp, hl
                        
8877: FD E1                 pop     iy
8879: DD E1                 pop     ix
887B: D1                    pop     de
887C: C1                    pop     bc
887D: E1                    pop     hl
887E: C9                    ret
                        #endlocal
                        
                        ; void forth_next()
                        ; - code for the Forth "next" routine, which executes the instruction at IP.
                        #local
                        forth_next::
                            ; W = (IP++)
887F: 1A                    ld      a, (de)             ; Low byte of (IP)
8880: 6F                    ld      l, a
8881: 13                    inc     de
8882: 1A                    ld      a, (de)             ; High byte of (IP)
8883: 67                    ld      h, a
8884: 13                    inc     de
                            ; JP (IP)
8885: E9                    jp      (hl)
                        #endlocal
                        
                        ; void forth_terminate()
                        ; - terminates the interpreter
                        #local
                        forth_terminate::
8886: C3 6B 88              jp      forth_parse_line_terminate
                        #endlocal
                        
                        ; Format of the Forth dictionary:
                        ;
                        ; Link (2): Pointer to previous entry in dictionary, or NULL.
                        ; Flags (1): Set of flags about the entry. See F_IMMED.
                        ; Name (len(name)+1): Nul-terminated name of entry.
                        ; Code (...): Code for the routine.
                        
                        F_IMMED equ 0x01
                        
                        ; Macro for defining words in assembly language.
                        FORTH_LINK = 0
                        M_forth_native macro name, flags, label
                        FORTH_THIS_ADDR = $
                            .dw     FORTH_LINK
                            .db     &flags
                        FORTH_LINK = FORTH_THIS_ADDR
                            .asciz  &name
                        forth_native_&label::
                            endm
                        
                        ; Macro for defining words as a sequence of Forth native calls.
                        ; Be sure to finish with forth_native_exit.
                        M_forth_word macro name, flags, label
                            M_forth_native &name, &flags, &label
                            call    forth_native_enter
                            endm
                        
                        ; Macro for defining a constant. Don't put quotes around the name.
                        M_forth_const macro name, value
                            M_forth_word "&name", 0, &name
                            .dw     forth_native_lit
                            .dw     &value
                            .dw     forth_native_exit
                            endm
                        
                        ; - code for entering a Forth word.
                            M_forth_native "enter", 0, enter
                        FORTH_THIS_ADDR = $
8889: 00 00                 .dw     FORTH_LINK
888B: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
888C: 65 6E 74 65           .asciz  "enter"
8890: 72 00
                        forth_native_enter::
                            ; Push IP onto return address stack.
8892: DD 2B                 dec     ix
8894: DD 72 00              ld      (ix+0), d
8897: DD 2B                 dec     ix
8899: DD 73 00              ld      (ix+0), e
                        
                            ; IP = W+2. We were called here from the code field, so the stack
                            ; contains the address of the next IP.
889C: D1                    pop     de
889D: C3 7F 88              jp      forth_next
                        
                        ; - code for exiting a Forth word.
                            M_forth_native "exit", 0, exit
                        FORTH_THIS_ADDR = $
88A0: 89 88                 .dw     FORTH_LINK
88A2: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
88A3: 65 78 69 74           .asciz  "exit"
88A7: 00
                        forth_native_exit::
                            ; Pop IP from return address stack.
88A8: DD 5E 00              ld      e, (ix+0)
88AB: DD 23                 inc     ix
88AD: DD 56 00              ld      d, (ix+0)
88B0: DD 23                 inc     ix
88B2: C3 7F 88              jp      forth_next
                        
                        ; - duplicates the word at the top of the parameter stack.
                            M_forth_native "dup", 0, dup
                        FORTH_THIS_ADDR = $
88B5: A0 88                 .dw     FORTH_LINK
88B7: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
88B8: 64 75 70 00           .asciz  "dup"
                        forth_native_dup::
88BC: C5                    push    bc
88BD: C3 7F 88              jp      forth_next
                        
                        ; - duplicates the word at the top of the parameter stack if non-zero.
                        ; - this seems weird but it's useful for while loops where you want to
                        ; - use this as a condition. It saves you from having to drop it later.
                            M_forth_native "?dup", 0, qdup
                        FORTH_THIS_ADDR = $
88C0: B5 88                 .dw     FORTH_LINK
88C2: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
88C3: 3F 64 75 70           .asciz  "?dup"
88C7: 00
                        forth_native_qdup::
                        #local
88C8: 79                    ld      a, c
88C9: B7                    or      a
88CA: 20 04                 jr      nz, not_zero
88CC: 78                    ld      a, b
88CD: B7                    or      a
88CE: 28 01                 jr      z, zero
                        not_zero:
88D0: C5                    push    bc
                        zero:
88D1: C3 7F 88              jp      forth_next
                        #endlocal
                        
                        ; - drops the top word of the stack.
                            M_forth_native "drop", 0, drop
                        FORTH_THIS_ADDR = $
88D4: C0 88                 .dw     FORTH_LINK
88D6: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
88D7: 64 72 6F 70           .asciz  "drop"
88DB: 00
                        forth_native_drop::
88DC: C1                    pop     bc
88DD: C3 7F 88              jp      forth_next
                        
                        ; - swaps the top two words on the stack.
                            M_forth_native "swap", 0, swap
                        FORTH_THIS_ADDR = $
88E0: D4 88                 .dw     FORTH_LINK
88E2: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
88E3: 73 77 61 70           .asciz  "swap"
88E7: 00
                        forth_native_swap::
88E8: E1                    pop     hl
88E9: C5                    push    bc
88EA: 44 4D                 ld      bc, hl
88EC: C3 7F 88              jp      forth_next
                        
                        ; - duplicates the second-to-last word on the stack.
                            M_forth_native "over", 0, over
                        FORTH_THIS_ADDR = $
88EF: E0 88                 .dw     FORTH_LINK
88F1: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
88F2: 6F 76 65 72           .asciz  "over"
88F6: 00
                        forth_native_over::
88F7: E1                    pop     hl
88F8: E5                    push    hl
88F9: C5                    push    bc
88FA: 44 4D                 ld      bc, hl
88FC: C3 7F 88              jp      forth_next
                        
                        ; - rotates the stack: ( a b c -- b c a )
                            M_forth_native "rot", 0, rot
                        FORTH_THIS_ADDR = $
88FF: EF 88                 .dw     FORTH_LINK
8901: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8902: 72 6F 74 00           .asciz  "rot"
                        forth_native_rot::
8906: E1                    pop     hl
8907: 22 75 8F              ld      (Forth_tmp1), hl        ; "b" above
890A: E1                    pop     hl
890B: 22 77 8F              ld      (Forth_tmp2), hl        ; "a" above
890E: 2A 75 8F              ld      hl, (Forth_tmp1)
8911: E5                    push    hl
8912: C5                    push    bc
8913: ED 4B 77 8F           ld      bc, (Forth_tmp2)
8917: C3 7F 88              jp      forth_next
                        
                        ; - rotates the stack: ( a b c -- c a b )
                            M_forth_native "-rot", 0, negrot
                        FORTH_THIS_ADDR = $
891A: FF 88                 .dw     FORTH_LINK
891C: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
891D: 2D 72 6F 74           .asciz  "-rot"
8921: 00
                        forth_native_negrot::
8922: E1                    pop     hl
8923: 22 75 8F              ld      (Forth_tmp1), hl        ; "b" above
8926: E1                    pop     hl                      ; "a" above
8927: C5                    push    bc
8928: E5                    push    hl
8929: ED 4B 75 8F           ld      bc, (Forth_tmp1)
892D: C3 7F 88              jp      forth_next
                        
                        ; - reads the pointer at the top of the stack.
                            M_forth_native "@", 0, at
                        FORTH_THIS_ADDR = $
8930: 1A 89                 .dw     FORTH_LINK
8932: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8933: 40 00                 .asciz  "@"
                        forth_native_at::
8935: 60 69                 ld      hl, bc
8937: 4E 23 46 2B           ld      bc, (hl)
893B: C3 7F 88              jp      forth_next
                        
                        ; - writes the pointer at the top of the stack (push value, address).
                            M_forth_native "!", 0, bang
                        FORTH_THIS_ADDR = $
893E: 30 89                 .dw     FORTH_LINK
8940: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8941: 21 00                 .asciz  "!"
                        forth_native_bang::
8943: 60 69                 ld      hl, bc
8945: C1                    pop     bc
8946: 71 23 70 2B           ld      (hl), bc
894A: C1                    pop     bc
894B: C3 7F 88              jp      forth_next
                        
                        ; - reads the port at the top of the stack.
                            M_forth_native "io@", 0, ioat
                        FORTH_THIS_ADDR = $
894E: 3E 89                 .dw     FORTH_LINK
8950: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8951: 69 6F 40 00           .asciz  "io@"
                        forth_native_ioat::
8955: ED 48                 in      c, (c)
8957: 06 00                 ld      b, 0
8959: C3 7F 88              jp      forth_next
                        
                        ; - writes the port at the top of the stack (push value, address).
                            M_forth_native "io!", 0, iobang
                        FORTH_THIS_ADDR = $
895C: 4E 89                 .dw     FORTH_LINK
895E: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
895F: 69 6F 21 00           .asciz  "io!"
                        forth_native_iobang::
8963: E1                    pop     hl
8964: ED 69                 out     (c), l
8966: C1                    pop     bc
8967: C3 7F 88              jp      forth_next
                        
                        ; - bit-wise ands the top two entries in the parameter stack.
                            M_forth_native "and", 0, and
                        FORTH_THIS_ADDR = $
896A: 5C 89                 .dw     FORTH_LINK
896C: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
896D: 61 6E 64 00           .asciz  "and"
                        forth_native_and::
8971: E1                    pop     hl
8972: 79                    ld      a, c
8973: A5                    and     l
8974: 4F                    ld      c, a
8975: 78                    ld      a, b
8976: A4                    and     h
8977: 47                    ld      b, a
8978: C3 7F 88              jp      forth_next
                        
                        ; - bit-wise ors the top two entries in the parameter stack.
                            M_forth_native "or", 0, or
                        FORTH_THIS_ADDR = $
897B: 6A 89                 .dw     FORTH_LINK
897D: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
897E: 6F 72 00              .asciz  "or"
                        forth_native_or::
8981: E1                    pop     hl
8982: 79                    ld      a, c
8983: B5                    or      l
8984: 4F                    ld      c, a
8985: 78                    ld      a, b
8986: B4                    or      h
8987: 47                    ld      b, a
8988: C3 7F 88              jp      forth_next
                        
                        ; - bit-wise inverts top entry in the parameter stack.
                            M_forth_native "invert", 0, invert
                        FORTH_THIS_ADDR = $
898B: 7B 89                 .dw     FORTH_LINK
898D: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
898E: 69 6E 76 65           .asciz  "invert"
8992: 72 74 00
                        forth_native_invert::
8995: 79                    ld      a, c
8996: 2F                    cpl
8997: 4F                    ld      c, a
8998: 78                    ld      a, b
8999: 2F                    cpl
899A: 47                    ld      b, a
899B: C3 7F 88              jp      forth_next
                        
                        ; - shift the top stack entry right eight bits.
                            M_forth_native "8>>", 0, shift_right
                        FORTH_THIS_ADDR = $
899E: 8B 89                 .dw     FORTH_LINK
89A0: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
89A1: 38 3E 3E 00           .asciz  "8>>"
                        forth_native_shift_right::
89A5: 48                    ld      c, b
89A6: 06 00                 ld      b, 0
89A8: C3 7F 88              jp      forth_next
                        
                        ; - shift the top stack entry left eight bits.
                            M_forth_native "8<<", 0, shift_left
                        FORTH_THIS_ADDR = $
89AB: 9E 89                 .dw     FORTH_LINK
89AD: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
89AE: 38 3C 3C 00           .asciz  "8<<"
                        forth_native_shift_left::
89B2: 41                    ld      b, c
89B3: 0E 00                 ld      c, 0
89B5: C3 7F 88              jp      forth_next
                        
                        ; - adds the top two entries in the parameter stack.
                            M_forth_native "+", 0, add
                        FORTH_THIS_ADDR = $
89B8: AB 89                 .dw     FORTH_LINK
89BA: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
89BB: 2B 00                 .asciz  "+"
                        forth_native_add::
89BD: E1                    pop     hl
89BE: 09                    add     hl, bc
89BF: 44 4D                 ld      bc, hl
89C1: C3 7F 88              jp      forth_next
                        
                        ; - subtracts the top two entries in the parameter stack (a b -- a-b)
                            M_forth_native "-", 0, sub
                        FORTH_THIS_ADDR = $
89C4: B8 89                 .dw     FORTH_LINK
89C6: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
89C7: 2D 00                 .asciz  "-"
                        forth_native_sub::
89C9: E1                    pop     hl
89CA: B7                    or      a           ; Clear carry.
89CB: ED 42                 sbc     hl, bc
89CD: 44 4D                 ld      bc, hl
89CF: C3 7F 88              jp      forth_next
                        
                        ; - multiplies the top two entries on the parameter stack.
                            M_forth_native "*", 0, mul
                        FORTH_THIS_ADDR = $
89D2: C4 89                 .dw     FORTH_LINK
89D4: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
89D5: 2A 00                 .asciz  "*"
                        forth_native_mul::
89D7: ED 53 71 8F           ld      (Forth_orig_de), de
89DB: D1                    pop     de
89DC: CD 92 8E              call    mul16
89DF: 44 4D                 ld      bc, hl      ; Drop higher 16 bits.
89E1: ED 5B 71 8F           ld      de, (Forth_orig_de)
89E5: C3 7F 88              jp      forth_next
                        
                        ; - computes the remainder and quotient of the top two stack entries (n, d).
                        ; - (n d -- q r)
                            M_forth_native "/mod", 0, divmod
                        FORTH_THIS_ADDR = $
89E8: D2 89                 .dw     FORTH_LINK
89EA: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
89EB: 2F 6D 6F 64           .asciz  "/mod"
89EF: 00
                        forth_native_divmod::
89F0: ED 53 71 8F           ld      (Forth_orig_de), de
89F4: 50 59                 ld      de, bc
89F6: C1                    pop     bc
89F7: 78                    ld      a, b
                            ; The following routine divides AC by DE and places the quotient in AC and
                            ; the remainder in HL.
89F8: CD 75 8E              call    divmod16
89FB: E5                    push    hl
89FC: 47                    ld      b, a
89FD: ED 5B 71 8F           ld      de, (Forth_orig_de)
8A01: C3 7F 88              jp      forth_next
                        
                        ; - determines if the top two stack entries are the same, leaving 0 or 1.
                            M_forth_native "=", 0, equ
                        FORTH_THIS_ADDR = $
8A04: E8 89                 .dw     FORTH_LINK
8A06: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A07: 3D 00                 .asciz  "="
                        forth_native_equ::
                        #local
8A09: E1                    pop     hl
8A0A: B7                    or      a           ; Clear carry.
8A0B: ED 42                 sbc     hl, bc
8A0D: 01 00 00              ld      bc, 0
8A10: 20 01                 jr      nz, not_equal
8A12: 03                    inc     bc
                        not_equal:
8A13: C3 7F 88              jp      forth_next
                        #endlocal
                        
                        ; - computes < for the top two stack entries.
                            M_forth_native "<", 0, lt
                        FORTH_THIS_ADDR = $
8A16: 04 8A                 .dw     FORTH_LINK
8A18: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A19: 3C 00                 .asciz  "<"
                        forth_native_lt::
                        #local
8A1B: E1                    pop     hl
8A1C: B7                    or      a           ; Clear carry.
8A1D: ED 42                 sbc     hl, bc
8A1F: 01 00 00              ld      bc, 0
8A22: 30 01                 jr      nc, not_less_than
8A24: 03                    inc     bc
                        not_less_than:
8A25: C3 7F 88              jp      forth_next
                        #endlocal
                        
                        ; - prints the number on the top of the stack.
                            M_forth_native ".", 0, dot
                        FORTH_THIS_ADDR = $
8A28: 16 8A                 .dw     FORTH_LINK
8A2A: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A2B: 2E 00                 .asciz  "."
                        forth_native_dot::
8A2D: 60 69                 ld      hl, bc
8A2F: C1                    pop     bc
8A30: CD 4A 8E              call    lcd_puthex16
8A33: 2E 20                 ld      l, ' '
8A35: CD BF 8E              call    putc_l
8A38: C3 7F 88              jp      forth_next
                        
                        ; - prints the lowest byte of the number on the top of the stack.
                            M_forth_native ".b", 0, dot_byte
                        FORTH_THIS_ADDR = $
8A3B: 28 8A                 .dw     FORTH_LINK
8A3D: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A3E: 2E 62 00              .asciz  ".b"
                        forth_native_dot_byte::
8A41: 60 69                 ld      hl, bc
8A43: C1                    pop     bc
8A44: CD 32 8E              call    lcd_puthex8
8A47: 2E 20                 ld      l, ' '
8A49: CD BF 8E              call    putc_l
8A4C: C3 7F 88              jp      forth_next
                        
                        ; - prints the character at the top of the stack.
                            M_forth_native "emit", 0, emit
                        FORTH_THIS_ADDR = $
8A4F: 3B 8A                 .dw     FORTH_LINK
8A51: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A52: 65 6D 69 74           .asciz  "emit"
8A56: 00
                        forth_native_emit::
8A57: 69                    ld      l, c
8A58: CD BF 8E              call    putc_l
8A5B: C1                    pop     bc
8A5C: C3 7F 88              jp      forth_next
                        
                        ; - prints the string whose address is on the top of the stack.
                            M_forth_native "tell", 0, tell
                        FORTH_THIS_ADDR = $
8A5F: 4F 8A                 .dw     FORTH_LINK
8A61: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A62: 74 65 6C 6C           .asciz  "tell"
8A66: 00
                        forth_native_tell::
8A67: 22 73 8F              ld	    (Forth_orig_hl), hl
8A6A: 60 69                 ld      hl, bc
8A6C: CD A6 8E              call    print
8A6F: 2A 73 8F              ld	    hl, (Forth_orig_hl)
8A72: C1                    pop     bc
8A73: C3 7F 88              jp      forth_next
                        
                        ; - prints a cr/lf combo.
                            M_forth_native "cr", 0, cr
                        FORTH_THIS_ADDR = $
8A76: 5F 8A                 .dw     FORTH_LINK
8A78: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A79: 63 72 00              .asciz  "cr"
                        forth_native_cr::
8A7C: CD B7 8E              call    print_newline
8A7F: C3 7F 88              jp      forth_next
                        
                        ; - pushes the next word onto the parameter stack.
                            M_forth_native "lit", 0, lit
                        FORTH_THIS_ADDR = $
8A82: 76 8A                 .dw     FORTH_LINK
8A84: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A85: 6C 69 74 00           .asciz  "lit"
                        forth_native_lit::
8A89: C5                    push    bc
8A8A: 62 6B                 ld      hl, de
8A8C: 4E 23 46 2B           ld      bc, (hl)
8A90: 13                    inc     de
8A91: 13                    inc     de
8A92: C3 7F 88              jp      forth_next
                        
                        ; - adds the word at the top of the stack to our code.
                            M_forth_native ",", 0, comma
                        FORTH_THIS_ADDR = $
8A95: 82 8A                 .dw     FORTH_LINK
8A97: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8A98: 2C 00                 .asciz  ","
                        forth_native_comma::
8A9A: 60 69                 ld      hl, bc
8A9C: CD A3 8A              call    forth_comma
8A9F: C1                    pop     bc
8AA0: C3 7F 88              jp      forth_next
                        
                        ; - adds the word in HL to our code.
                        forth_comma:
8AA3: C5                    push    bc
8AA4: 44 4D                 ld      bc, hl
8AA6: 2A 69 8F              ld      hl, (Forth_here)
8AA9: 71 23 70 2B           ld      (hl), bc
8AAD: 23                    inc     hl
8AAE: 23                    inc     hl
8AAF: 22 69 8F              ld      (Forth_here), hl
8AB2: C1                    pop     bc
8AB3: C9                    ret
                        
                        ; Go into immediate (non-compiling) mode.
                            M_forth_native "[", F_IMMED, lbrac
                        FORTH_THIS_ADDR = $
8AB4: 95 8A                 .dw     FORTH_LINK
8AB6: 01                    .db     F_IMMED
                        FORTH_LINK = FORTH_THIS_ADDR
8AB7: 5B 00                 .asciz  "["
                        forth_native_lbrac::
8AB9: AF                    xor     a
8ABA: 32 6F 8F              ld      (Forth_compiling), a
8ABD: C3 7F 88              jp      forth_next
                        
                        ; Go into compiling mode.
                            M_forth_native "]", 0, rbrac
                        FORTH_THIS_ADDR = $
8AC0: B4 8A                 .dw     FORTH_LINK
8AC2: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8AC3: 5D 00                 .asciz  "]"
                        forth_native_rbrac::
8AC5: 3E 01                 ld      a, 1
8AC7: 32 6F 8F              ld      (Forth_compiling), a
8ACA: C3 7F 88              jp      forth_next
                        
                        ; - put the address of the code of the word that's next in
                        ; - the stream onto the stack. This version only works
                        ; - in compiled mode. There's another version that uses
                        ; - word, find, and cfa, but I think it only works in
                        ; - immediate mode, and I don't need it then. See below.
                        ; - Note that this version has identical code to the "lit"
                        ; - word, so we could just use that instead?
                            M_forth_native "'", 0, tick
                        FORTH_THIS_ADDR = $
8ACD: C0 8A                 .dw     FORTH_LINK
8ACF: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8AD0: 27 00                 .asciz  "'"
                        forth_native_tick::
8AD2: C5                    push    bc
8AD3: 62 6B                 ld      hl, de
8AD5: 4E 23 46 2B           ld      bc, (hl)
8AD9: 13                    inc     de
8ADA: 13                    inc     de
8ADB: C3 7F 88              jp      forth_next
                        
                        ; Immediate mode version:
                        ;;    call    forth_word
                        ;;    call    forth_find
                        ;;    call    forth_cfa
                        ;;    push    bc
                        ;;    ld      bc, hl
                        ;;    jp      forth_next
                        
                        ; - lists code memory.
                            M_forth_native "code", 0, code
                        FORTH_THIS_ADDR = $
8ADE: CD 8A                 .dw     FORTH_LINK
8AE0: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8AE1: 63 6F 64 65           .asciz  "code"
8AE5: 00
                        forth_native_code::
                        #local
8AE6: C5                    push    bc
8AE7: 21 9B 8F              ld      hl, Forth_code      ; Start.
8AEA: ED 4B 69 8F           ld      bc, (Forth_here)    ; End.
                        
                        loop:
                            ; See if we're done.
8AEE: B7                    or      a           ; Clear carry.
8AEF: ED 42                 sbc     hl, bc
8AF1: 09                    add     hl, bc
8AF2: 28 0F                 jr      z, done
                        
                            ; Dereference HL.
8AF4: 7E                    ld      a, (hl)
8AF5: E5                    push    hl
8AF6: 6F                    ld      l, a
                        
                            ; Print.
8AF7: CD 32 8E              call    lcd_puthex8
8AFA: 2E 20                 ld      l, ' '
8AFC: CD BF 8E              call    putc_l
                        
                            ; Next word.
8AFF: E1                    pop     hl
8B00: 23                    inc     hl
8B01: 18 EB                 jr      loop
                        
                        done:
8B03: CD B7 8E              call    print_newline
8B06: C1                    pop     bc
8B07: C3 7F 88              jp      forth_next
                        #endlocal
                        
                        ; - creates a new entry in the dictionary.
                        ; - the top of the stack has the name.
                            M_forth_native "create", 0, create
                        FORTH_THIS_ADDR = $
8B0A: DE 8A                 .dw     FORTH_LINK
8B0C: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8B0D: 63 72 65 61           .asciz  "create"
8B11: 74 65 00
                        forth_native_create::
                        #local
8B14: 2A 69 8F              ld      hl, (Forth_here)
                        
                            ; Set up next-word pointer.
8B17: D5                    push    de
8B18: ED 5B 67 8F           ld      de, (Forth_dict)
8B1C: 73 23 72 2B           ld      (hl), de
8B20: D1                    pop     de
                            ; Write our new linked list head.
8B21: 22 67 8F              ld      (Forth_dict), hl
                            ; Skip link pointer.
8B24: 23                    inc     hl
8B25: 23                    inc     hl
                        
                            ; Write flags. Default to zero.
8B26: 36 00                 ld      (hl), 0
8B28: 23                    inc     hl
                        
                            ; Copy name from BC (top of stack).
                        loop:
8B29: 0A                    ld      a, (bc)
8B2A: 77                    ld      (hl), a
8B2B: 23                    inc     hl
8B2C: 03                    inc     bc
8B2D: B7                    or      a
8B2E: 20 F9                 jr      nz, loop
                        
                            ; Add a "call" instruction. We'll fill in the address later from Forth itself.
8B30: 36 CD                 ld      (hl), 0xCD   ; opcode(call NN)
8B32: 23                    inc     hl
                        
                            ; Write back our new "here".
8B33: 22 69 8F              ld      (Forth_here), hl
8B36: C1                    pop     bc
8B37: C3 7F 88              jp      forth_next
                        #endlocal
                        
                        ; - skips the header of a dictionary entry.
                            M_forth_native ">cfa", 0, cfa
                        FORTH_THIS_ADDR = $
8B3A: 0A 8B                 .dw     FORTH_LINK
8B3C: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8B3D: 3E 63 66 61           .asciz  ">cfa"
8B41: 00
                        forth_native_cfa::
8B42: 60 69                 ld      hl, bc
8B44: CD 4C 8B              call    forth_cfa
8B47: 44 4D                 ld      bc, hl
8B49: C3 7F 88              jp      forth_next
                        
                        ; - skips the header of a dictionary entry.
                        #local
                        forth_cfa::
                            ; HL is pointing to the start of the dictionary entry.
                            ; Skip the link pointer and flags.
8B4C: 23                    inc     hl
8B4D: 23                    inc     hl
8B4E: 23                    inc     hl
                        
                            ; Skip the nul-terminated string.
                        loop:
8B4F: 7E                    ld      a, (hl)
8B50: 23                    inc     hl
8B51: B7                    or      a
8B52: 20 FB                 jr      nz, loop
                        
8B54: C9                    ret
                        #endlocal
                        
                        
                        ; - gets the next word from the input stream and puts its address
                        ; - on the parameter stack.
                            M_forth_native "word", 0, word
                        FORTH_THIS_ADDR = $
8B55: 3A 8B                 .dw     FORTH_LINK
8B57: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8B58: 77 6F 72 64           .asciz  "word"
8B5C: 00
                        forth_native_word::
8B5D: C5                    push    bc
8B5E: CD 66 8B              call    forth_word
8B61: 44 4D                 ld      bc, hl
8B63: C3 7F 88              jp      forth_next
                        
                        ; - gets the next word from the input stream and returns its address in HL.
                        ; - The pointer will point to a NUL byte if we're at the end of the buffer.
                        #local
                        forth_word::
8B66: D5                    push    de
8B67: 2A 6D 8F              ld      hl, (Forth_input)
                        
                            ; Skip whitespace and comments.
                        whitespace_loop:
8B6A: 7E                    ld      a, (hl)
8B6B: FE 20                 cp      ' '
8B6D: 28 1E                 jr      z, whitespace
8B6F: FE 09                 cp      HT
8B71: 28 1A                 jr      z, whitespace
8B73: FE 0A                 cp      LF
8B75: 28 16                 jr      z, whitespace
8B77: FE 0D                 cp      CR
8B79: 28 12                 jr      z, whitespace
8B7B: FE 5C                 cp      0x5C ; backslash
8B7D: 20 11                 jr      nz, end_of_whitespace
                        
                            ; Just saw backslash, read until end of line or end of buffer.
                        comment_loop:
8B7F: 23                    inc     hl
8B80: 7E                    ld      a, (hl)
8B81: FE 00                 cp      NUL
8B83: 28 0B                 jr      z, end_of_whitespace
8B85: FE 0A                 cp      LF
8B87: 28 04                 jr      z, whitespace
8B89: FE 0D                 cp      CR
8B8B: 20 F2                 jr      nz, comment_loop
                        
                        whitespace:
8B8D: 23                    inc     hl
8B8E: 18 DA                 jr      whitespace_loop
                        
                        end_of_whitespace:
                            ; Copy word
8B90: 11 7B 8F              ld      de, Forth_word
                        word_loop:
8B93: 7E                    ld      a, (hl)
8B94: FE 20                 cp      ' '
8B96: 28 15                 jr      z, end_of_word
8B98: FE 0A                 cp      LF
8B9A: 28 11                 jr      z, end_of_word
8B9C: FE 0D                 cp      CR
8B9E: 28 0D                 jr      z, end_of_word
8BA0: FE 5C                 cp      0x5C ; backslash
8BA2: 28 09                 jr      z, end_of_word
8BA4: FE 00                 cp      NUL
8BA6: 28 05                 jr      z, end_of_word
8BA8: 12                    ld      (de), a
8BA9: 23                    inc     hl
8BAA: 13                    inc     de
8BAB: 18 E6                 jr      word_loop
                        
                        end_of_word:
                            ; NUL-terminate word.
8BAD: 3E 00                 ld      a, NUL
8BAF: 12                    ld      (de), a
                        
                            ; Record new position.
8BB0: 22 6D 8F              ld      (Forth_input), hl
                        
8BB3: 21 7B 8F              ld      hl, Forth_word
8BB6: D1                    pop     de
8BB7: C9                    ret
                        #endlocal
                        
                        ; - skips over the number of bytes specified at the IP.
                            M_forth_native "branch", 0, branch
                        FORTH_THIS_ADDR = $
8BB8: 55 8B                 .dw     FORTH_LINK
8BBA: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8BBB: 62 72 61 6E           .asciz  "branch"
8BBF: 63 68 00
                        forth_native_branch::
8BC2: C5                    push    bc
                        forth_native_branch_tail::
8BC3: 62 6B                 ld      hl, de
8BC5: 4E 23 46 2B           ld      bc, (hl)
8BC9: 09                    add     hl, bc
8BCA: 54 5D                 ld      de, hl
8BCC: C1                    pop     bc
8BCD: C3 7F 88              jp      forth_next
                        
                        ; - skips over the number of bytes specified at the IP if TOS is zero.
                            M_forth_native "0branch", 0, 0branch
                        FORTH_THIS_ADDR = $
8BD0: B8 8B                 .dw     FORTH_LINK
8BD2: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8BD3: 30 62 72 61           .asciz  "0branch"
8BD7: 6E 63 68 00
                        forth_native_0branch::
                        #local
                            ; Check top of stack (BC).
8BDB: 78                    ld      a, b
8BDC: B7                    or      a
8BDD: 20 05                 jr      nz, no_skip
8BDF: 79                    ld      a, c
8BE0: B7                    or      a
8BE1: CA C3 8B              jp      z, forth_native_branch_tail
                        
                        no_skip:
                            ; Still need to skip the count itself.
8BE4: 13                    inc     de
8BE5: 13                    inc     de
8BE6: C1                    pop     bc
8BE7: C3 7F 88              jp      forth_next
                        #endlocal
                        
                        ; - finds the string at the top of the stack in the dictionary.
                        ; - returns a pointer to the dictionary entry or NULL if not found.
                            M_forth_native "find", 0, find
                        FORTH_THIS_ADDR = $
8BEA: D0 8B                 .dw     FORTH_LINK
8BEC: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8BED: 66 69 6E 64           .asciz  "find"
8BF1: 00
                        forth_native_find::
8BF2: 60 69                 ld      hl, bc
8BF4: CD 0C 8D              call    forth_find
8BF7: 44 4D                 ld      bc, hl
8BF9: C3 7F 88              jp      forth_next
                        
                        ; - toggles the immediate flag of the most recently defined word.
                            M_forth_native "immediate", F_IMMED, immediate
                        FORTH_THIS_ADDR = $
8BFC: EA 8B                 .dw     FORTH_LINK
8BFE: 01                    .db     F_IMMED
                        FORTH_LINK = FORTH_THIS_ADDR
8BFF: 69 6D 6D 65           .asciz  "immediate"
8C03: 64 69 61 74
8C07: 65 00
                        forth_native_immediate::
                            ; Get most recent word.
8C09: 2A 67 8F              ld      hl, (Forth_dict)
                            ; Skip link.
8C0C: 23                    inc     hl
8C0D: 23                    inc     hl
                            ; Toggle immediate flag.
8C0E: 7E                    ld      a, (hl)
8C0F: EE 01                 xor     F_IMMED
8C11: 77                    ld      (hl), a
8C12: C3 7F 88              jp      forth_next
                        
                        ; - starts a definition of a new word.
                            M_forth_word ":", 0, colon
                            M_forth_native ":", 0, colon
                        FORTH_THIS_ADDR = $
8C15: FC 8B                 .dw     FORTH_LINK
8C17: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8C18: 3A 00                 .asciz  ":"
                        forth_native_colon::
8C1A: CD 92 88              call    forth_native_enter
8C1D: 5D 8B                 .dw     forth_native_word
8C1F: 14 8B                 .dw     forth_native_create
8C21: 89 8A                 .dw     forth_native_lit
8C23: 92 88                 .dw     forth_native_enter
8C25: 9A 8A                 .dw     forth_native_comma
8C27: C5 8A                 .dw     forth_native_rbrac
8C29: A8 88                 .dw     forth_native_exit
                        
                        ; - end a definition of a new word.
                            M_forth_word ";", F_IMMED, semicolon
                            M_forth_native ";", F_IMMED, semicolon
                        FORTH_THIS_ADDR = $
8C2B: 15 8C                 .dw     FORTH_LINK
8C2D: 01                    .db     F_IMMED
                        FORTH_LINK = FORTH_THIS_ADDR
8C2E: 3B 00                 .asciz  ";"
                        forth_native_semicolon::
8C30: CD 92 88              call    forth_native_enter
8C33: 89 8A                 .dw     forth_native_lit
8C35: A8 88                 .dw     forth_native_exit
8C37: 9A 8A                 .dw     forth_native_comma
8C39: B9 8A                 .dw     forth_native_lbrac
8C3B: A8 88                 .dw     forth_native_exit
                        
                        ; - plot a pixel.
                            M_forth_native "gfx_set", 0, rnd
                        FORTH_THIS_ADDR = $
8C3D: 2B 8C                 .dw     FORTH_LINK
8C3F: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8C40: 67 66 78 5F           .asciz  "gfx_set"
8C44: 73 65 74 00
                        forth_native_rnd::
8C48: C3 7F 88              jp      forth_next
                        
                        ; - pushes a random 16-bit number onto the stack.
                            M_forth_native "rnd", 0, rnd
                        FORTH_THIS_ADDR = $
8C4B: 3D 8C                 .dw     FORTH_LINK
8C4D: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8C4E: 72 6E 64 00           .asciz  "rnd"
                        forth_native_rnd::
8C52: C5                    push    bc
8C53: CD C8 8E              call    rand16
8C56: 44 4D                 ld      bc, hl
8C58: C3 7F 88              jp      forth_next
                        
                        ; - pushes a random number mod N onto the stack.
                            M_forth_native "rndn", 0, rndn
                        FORTH_THIS_ADDR = $
8C5B: 4B 8C                 .dw     FORTH_LINK
8C5D: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8C5E: 72 6E 64 6E           .asciz  "rndn"
8C62: 00
                        forth_native_rndn::
8C63: 60 69                 ld	    hl, bc
8C65: CD E4 8E              call    rand16_modn
8C68: 44 4D                 ld      bc, hl
8C6A: C3 7F 88              jp      forth_next
                        
                        ; - blocks and reads a character from the keyboard.
                            M_forth_native "key", 0, key
                        FORTH_THIS_ADDR = $
8C6D: 5B 8C                 .dw     FORTH_LINK
8C6F: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8C70: 6B 65 79 00           .asciz  "key"
                        forth_native_key::
8C74: C5                    push    bc
8C75: ED 53 71 8F           ld      (Forth_orig_de), de
8C79: CD 49 00              call    0x0049
8C7C: ED 5B 71 8F           ld      de, (Forth_orig_de)
8C80: 4F                    ld      c, a
8C81: 06 00                 ld      b, 0
8C83: C3 7F 88              jp      forth_next
                        
                        ; - various constants.
                            M_forth_const gfx_width, 128
                            M_forth_word "gfx_width", 0, gfx_width
                            M_forth_native "gfx_width", 0, gfx_width
                        FORTH_THIS_ADDR = $
8C86: 6D 8C                 .dw     FORTH_LINK
8C88: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8C89: 67 66 78 5F           .asciz  "gfx_width"
8C8D: 77 69 64 74
8C91: 68 00
                        forth_native_gfx_width::
8C93: CD 92 88              call    forth_native_enter
8C96: 89 8A                 .dw     forth_native_lit
8C98: 80 00                 .dw     128
8C9A: A8 88                 .dw     forth_native_exit
                            M_forth_const gfx_height, 48
                            M_forth_word "gfx_height", 0, gfx_height
                            M_forth_native "gfx_height", 0, gfx_height
                        FORTH_THIS_ADDR = $
8C9C: 86 8C                 .dw     FORTH_LINK
8C9E: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8C9F: 67 66 78 5F           .asciz  "gfx_height"
8CA3: 68 65 69 67
8CA7: 68 74 00
                        forth_native_gfx_height::
8CAA: CD 92 88              call    forth_native_enter
8CAD: 89 8A                 .dw     forth_native_lit
8CAF: 30 00                 .dw     48
8CB1: A8 88                 .dw     forth_native_exit
                            M_forth_const latest, Forth_dict
                            M_forth_word "latest", 0, latest
                            M_forth_native "latest", 0, latest
                        FORTH_THIS_ADDR = $
8CB3: 9C 8C                 .dw     FORTH_LINK
8CB5: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8CB6: 6C 61 74 65           .asciz  "latest"
8CBA: 73 74 00
                        forth_native_latest::
8CBD: CD 92 88              call    forth_native_enter
8CC0: 89 8A                 .dw     forth_native_lit
8CC2: 67 8F                 .dw     Forth_dict
8CC4: A8 88                 .dw     forth_native_exit
                            M_forth_const state, Forth_compiling
                            M_forth_word "state", 0, state
                            M_forth_native "state", 0, state
                        FORTH_THIS_ADDR = $
8CC6: B3 8C                 .dw     FORTH_LINK
8CC8: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8CC9: 73 74 61 74           .asciz  "state"
8CCD: 65 00
                        forth_native_state::
8CCF: CD 92 88              call    forth_native_enter
8CD2: 89 8A                 .dw     forth_native_lit
8CD4: 6F 8F                 .dw     Forth_compiling
8CD6: A8 88                 .dw     forth_native_exit
                            M_forth_const here, Forth_here
                            M_forth_word "here", 0, here
                            M_forth_native "here", 0, here
                        FORTH_THIS_ADDR = $
8CD8: C6 8C                 .dw     FORTH_LINK
8CDA: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8CDB: 68 65 72 65           .asciz  "here"
8CDF: 00
                        forth_native_here::
8CE0: CD 92 88              call    forth_native_enter
8CE3: 89 8A                 .dw     forth_native_lit
8CE5: 69 8F                 .dw     Forth_here
8CE7: A8 88                 .dw     forth_native_exit
                            M_forth_const base, Forth_base
                            M_forth_word "base", 0, base
                            M_forth_native "base", 0, base
                        FORTH_THIS_ADDR = $
8CE9: D8 8C                 .dw     FORTH_LINK
8CEB: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8CEC: 62 61 73 65           .asciz  "base"
8CF0: 00
                        forth_native_base::
8CF1: CD 92 88              call    forth_native_enter
8CF4: 89 8A                 .dw     forth_native_lit
8CF6: 79 8F                 .dw     Forth_base
8CF8: A8 88                 .dw     forth_native_exit
                        
                        ; - Read the stack pointer.
                            M_forth_native "dsp@", 0, dsp_read
                        FORTH_THIS_ADDR = $
8CFA: E9 8C                 .dw     FORTH_LINK
8CFC: 00                    .db     0
                        FORTH_LINK = FORTH_THIS_ADDR
8CFD: 64 73 70 40           .asciz  "dsp@"
8D01: 00
                        forth_native_dsp_read::
8D02: C5                    push    bc
8D03: 21 00 00              ld      hl, 0
8D06: 39                    add     hl, sp
8D07: 44 4D                 ld      bc, hl
8D09: C3 7F 88              jp      forth_next
                        
                        ; - finds the string pointed to by HL in the dictionary.
                        ; - returns a pointer to the dictionary entry or NULL if not found.
                        #local
                        forth_find::
8D0C: C5                    push    bc
8D0D: 44 4D                 ld      bc, hl
                        
                            ; Start at head of linked list.
8D0F: 2A 67 8F              ld      hl, (Forth_dict)
                        
                        loop:
                            ; See if HL is null.
8D12: 7D                    ld      a, l
8D13: B7                    or      a
8D14: C2 1C 8D              jp      nz, not_null
8D17: 7C                    ld      a, h
8D18: B7                    or      a
8D19: CA 2F 8D              jp      z, done
                        
                        not_null:
                            ; Point to name of routine.
8D1C: 23                    inc     hl
8D1D: 23                    inc     hl
8D1E: 23                    inc     hl
                        
                            ; BC and HL are both now pointing to strings. Compare them.
                            ; The result is in the zero flag.
8D1F: CD A8 8D              call    forth_strequ
                        
                            ; Point back to link pointer. These don't modify the zero flag.
8D22: 2B                    dec     hl
8D23: 2B                    dec     hl
8D24: 2B                    dec     hl
                        
                            ; forth_strequ puts the result in the zero flag, where set means equal.
8D25: CA 2F 8D              jp      z, done
                        
                            ; Jump to next entry in linked list.
8D28: 7E                    ld      a, (hl)
8D29: 23                    inc     hl
8D2A: 66                    ld      h, (hl)
8D2B: 6F                    ld      l, a
                        
8D2C: C3 12 8D              jp      loop
                        
                        done:
8D2F: C1                    pop     bc
8D30: C9                    ret
                        #endlocal
                        
                        ; - grabs the next word and processes it (runs it or compiles it).
                        #local
                        forth_interpret::
                            ; Parse the next space-delimited word.
8D31: CD 66 8B              call    forth_word
                        
                            ; See if we're at the end of the input buffer.
8D34: 7E                    ld      a, (hl)
8D35: B7                    or      a
8D36: CA 86 88              jp      z, forth_terminate
                        
                            ; Save name for later (number parsing and error display).
8D39: E5                    push    hl
                        
                            ; Find it in the dictionary.
8D3A: CD 0C 8D              call    forth_find
                        
                            ; See if it was found.
8D3D: 7D                    ld      a, l
8D3E: B7                    or      a
8D3F: 20 38                 jr      nz, found
8D41: 7C                    ld      a, h
8D42: B7                    or      a
8D43: 20 34                 jr      nz, found
                        
                            ; Not found, parse as number and push it.
8D45: E1                    pop     hl
8D46: CD C3 8D              call    parse_hex16
                            ; XXX detect that parsing failed, and print error message below.
                        
                            ; It's a number. Check if we're in immediate mode.
8D49: 3A 6F 8F              ld      a, (Forth_compiling)
8D4C: B7                    or      a
8D4D: 28 0E                 jr      z, not_found_immediate
                        
                            ; Compile IMM.
8D4F: E5                    push    hl
8D50: 21 89 8A              ld      hl, forth_native_lit
8D53: CD A3 8A              call    forth_comma
                        
                            ; Compile number.
8D56: E1                    pop     hl
8D57: CD A3 8A              call    forth_comma
8D5A: C3 7F 88              jp      forth_next
                        
                        not_found_immediate:
                            ; Push parsed value.
8D5D: C5                    push    bc
8D5E: 44 4D                 ld      bc, hl
8D60: C3 7F 88              jp      forth_next
                        
                            ; Not found, display error message.
8D63: 22 73 8F              ld	    (Forth_orig_hl), hl
8D66: 21 97 8D              ld      hl, word_not_found_error_message
8D69: CD A6 8E              call    print
8D6C: E1                    pop     hl
8D6D: CD A6 8E              call    print
8D70: CD B7 8E              call    print_newline
8D73: 2A 73 8F              ld	    hl, (Forth_orig_hl)
8D76: C3 86 88              jp      forth_terminate
                        
                        found:
                            ; Throw away saved name, we don't need it if it was found.
8D79: 33                    inc     sp
8D7A: 33                    inc     sp
                        
                            ; Check if we're in immediate mode.
8D7B: 3A 6F 8F              ld      a, (Forth_compiling)
8D7E: B7                    or      a
8D7F: 28 12                 jr      z, found_immediate
                        
                            ; Check immediate flag of word.
8D81: E5                    push    hl
8D82: 23                    inc     hl
8D83: 23                    inc     hl
8D84: 7E                    ld      a, (hl)
8D85: E1                    pop     hl
8D86: E6 01                 and     F_IMMED
8D88: 20 09                 jr      nz, found_immediate
                        
                            ; We're compiling it.
8D8A: CD 4C 8B              call    forth_cfa
8D8D: CD A3 8A              call    forth_comma
8D90: C3 7F 88              jp      forth_next
                        
                        found_immediate:
                            ; Move to code for word and execute it.
8D93: CD 4C 8B              call    forth_cfa
8D96: E9                    jp      (hl)
                        
                        word_not_found_error_message:
8D97: 57 6F 72 64           .text   "Word not found: ", NUL
8D9B: 20 6E 6F 74
8D9F: 20 66 6F 75
8DA3: 6E 64 3A 20
8DA7: 00
                        #endlocal
                        
                        ; void forth_strequ()
                        ; - compares nul-terminated strings in HL and BC.
                        ; - puts the result in the zero flag (set = equal, cleared = not equal).
                        #local
                        forth_strequ::
8DA8: E5                    push    hl
8DA9: C5                    push    bc
                        
                        loop:
                            ; Compare the characters.
8DAA: 0A                    ld      a, (bc)
8DAB: BE                    cp      (hl)
8DAC: 20 07                 jr      nz, done
                        
                            ; They're equal, see if we're done.
8DAE: B7                    or      a
8DAF: 28 04                 jr      z, done
                        
8DB1: 23                    inc     hl
8DB2: 03                    inc     bc
8DB3: 18 F5                 jr      loop
                        
                        done:
8DB5: C1                    pop     bc
8DB6: E1                    pop     hl
8DB7: C9                    ret
                        #endlocal
                        
                        ; void forth_init_dict()
                        ; - initialize the Forth dictionary, erasing all dynamically-created words.
                        ; - This routine needs to be placed after all uses of the macro M_forth_native.
                        forth_init_dict::
8DB8: E5                    push    hl
                            ; Initialize dictionary linked list pointer.
8DB9: 21 67 8F              ld      hl, Forth_dict
8DBC: 36 FA                 ld      (hl), lo(FORTH_LINK)
8DBE: 23                    inc     hl
8DBF: 36 8C                 ld      (hl), hi(FORTH_LINK)
8DC1: E1                    pop     hl
8DC2: C9                    ret
                        
                        ; uint16_t parse_hex16(char *s)
                        ; - parses a 16-bit hex value from "s".
                        #local
                        parse_hex16::
8DC3: D5                    push    de
                        
                            ; Parse high byte.
8DC4: 54 5D                 ld      de, hl
8DC6: CD D2 8D              call    parse_hex8
                        
                            ; Parse low byte.
8DC9: EB                    ex      de, hl
8DCA: 23                    inc     hl
8DCB: 23                    inc     hl
8DCC: CD D2 8D              call    parse_hex8
                        
                            ; Combine bytes.
8DCF: 63                    ld      h, e
                        
8DD0: D1                    pop     de
8DD1: C9                    ret
                        #endlocal
                        
                        ; uint8_t parse_hex8(char *s)
                        ; - parses an 8-bit hex value from "s".
                        #local
                        parse_hex8::
8DD2: C5                    push    bc
                        
                            ; Parse first nybble.
8DD3: 7E                    ld      a, (hl)
8DD4: CD 88 8E              call    hex2bin
                        
                            ; Shift left into high nybble.
8DD7: 87                    add	    a
8DD8: 87                    add	    a
8DD9: 87                    add	    a
8DDA: 87                    add	    a
8DDB: 47                    ld	    b, a
                        
                            ; Parse second nybble.
8DDC: 23                    inc     hl
8DDD: 7E                    ld      a, (hl)
8DDE: CD 88 8E              call    hex2bin
                        
                            ; Combine nybbles.
8DE1: B0                    or      b
8DE2: 6F                    ld      l, a
                        
8DE3: C1                    pop     bc
8DE4: C9                    ret
                        #endlocal
                        
                        ; void lcd_putdec16(uint16_t value)
                        ; - writes a 16-bit decimal value to the LCD
                        #local
                        lcd_putdec16::
8DE5: C5                    push    bc
8DE6: E5                    push    hl
8DE7: 01 F0 D8              ld      bc, -10000
8DEA: CD 06 8E              call    handle_digit
8DED: 01 18 FC              ld      bc, -1000
8DF0: CD 06 8E              call    handle_digit
8DF3: 01 9C FF              ld      bc, -100
8DF6: CD 06 8E              call    handle_digit
8DF9: 0E F6                 ld      c, -10
8DFB: CD 06 8E              call    handle_digit
8DFE: 0E FF                 ld      c, -1
8E00: CD 06 8E              call    handle_digit
8E03: E1                    pop     hl
8E04: C1                    pop     bc
8E05: C9                    ret
                        
                        handle_digit:
8E06: 3E 2F                 ld      a, '0'-1
                        increment_digit:
8E08: 3C                    inc     a
8E09: 09                    add     hl, bc
8E0A: 38 FC                 jr      c, increment_digit
8E0C: ED 42                 sbc     hl, bc
8E0E: E5                    push    hl
8E0F: 6F                    ld      l, a
8E10: CD BF 8E              call    putc_l
8E13: E1                    pop     hl
8E14: C9                    ret
                        #endlocal
                        
                        ; void gets()
                        ; - reads a line of text from keyboard, not including newline, into Gets_buffer.
                        ; - leaves the buffer nul-terminated.
                        #local
                        gets::
8E15: E5                    push    hl
8E16: C5                    push    bc
8E17: D5                    push    de
                        
8E18: 21 01 8F              ld      hl,Gets_buffer
8E1B: 06 63                 ld      b,Gets_buffer_sz-1
8E1D: CD 40 00              call    0x0040                  ; $KBLINE
8E20: 30 02                 jr      nc,not_break
                        
                            ; Break was pressed, empty the buffer.
8E22: 18 08                 jr      found
                        
                        not_break:
                            ; Find CR and replace with nul.
8E24: 7E                    ld      a,(hl)
8E25: FE 0D                 cp      13
8E27: 28 03                 jr      z,found
8E29: 23                    inc     hl
8E2A: 18 F8                 jr      not_break
                        
                        found:
8E2C: 36 00                 ld      (hl),0
                        
8E2E: D1                    pop	    de
8E2F: C1                    pop	    bc
8E30: E1                    pop     hl
8E31: C9                    ret
                        #endlocal
                        
                        ; void lcd_puthex8(uint8_t value)
                        ; - write an 8-bit hex value to the LCD
                        lcd_puthex8::
8E32: E5                    push    hl
8E33: 65                    ld	    h, l
8E34: 7D                    ld	    a, l
8E35: 0F                    rrca
8E36: 0F                    rrca
8E37: 0F                    rrca
8E38: 0F                    rrca
8E39: CD 52 8E              call    bin2hex
8E3C: 6F                    ld	    l, a
8E3D: CD BF 8E              call    putc_l
8E40: 7C                    ld	    a, h
8E41: CD 52 8E              call    bin2hex
8E44: 6F                    ld	    l, a
8E45: CD BF 8E              call    putc_l
8E48: E1                    pop	    hl
8E49: C9                    ret
                        
                        ; void lcd_puthex16(uint16_t value)
                        ; - write a 16-bit hex value to the LCD
                        lcd_puthex16::
8E4A: E5                    push    hl
8E4B: 6C                    ld      l, h
8E4C: CD 32 8E              call    lcd_puthex8
8E4F: E1                    pop     hl
8E50: 18 E0                 jr	    lcd_puthex8
                        
                        ; void strcpy(uint8_t *dst (HL), uint8_t *src (BC))
                        ; strings are NUL-terminated.
                        ; XXX this routine hasn't been tested.
                        ;#local
                        ;strcpy::
                        ;    push    hl
                        ;    push    bc
                        ;
                        ;loop:
                        ;    ld      a, (bc)
                        ;    ld      (hl), a
                        ;    inc     hl
                        ;    inc     bc
                        ;    or      a
                        ;    jr      nz, loop
                        ;
                        ;    pop     bc
                        ;    pop     hl
                        ;
                        ;    ret
                        ;#endlocal
                        
                        #include library "libcode"
                        #include "libcode/bin2hex.s"
                        ; uint8_t bin2hex(uint8_t val)
                        ; - converts the lower 4 bits of the 8-bit value "val" to hexadecimal (0-9,A-F)
                        ; - pass "val" in A
                        ; - returns in A
                        #local
                        bin2hex::
8E52: E6 0F                 and	    0xF
8E54: FE 0A                 cp	    0xA
8E56: 38 03                 jr	    c, decimal
8E58: C6 37                 add	    'A'-10
8E5A: C9                    ret
                        decimal:
8E5B: C6 30                 add	    '0'
8E5D: C9                    ret
                        #endlocal
                        
                        #include "libcode/bzero.s"
                        ; void bzero(uint8_t *ptr, uint16_t len)
                        ; - zero "len" bytes starting at address "ptr"
                        ; - pass "ptr" in HL, "len" in BC
                        #local
                        bzero::
8E5E: C5                    push    bc
8E5F: D5                    push    de
8E60: E5                    push    hl
8E61: 78                    ld	    a, b
8E62: B1                    or	    c
8E63: 28 0C                 jr	    z, done		; len == 0?
8E65: 36 00                 ld	    (hl), 0		; ptr[0] = 0
8E67: 0B                    dec	    bc
8E68: 78                    ld	    a, b
8E69: B1                    or	    c
8E6A: 28 05                 jr	    z, done		; len == 1?
8E6C: 5D                    ld	    e, l
8E6D: 54                    ld	    d, h
8E6E: 13                    inc	    de			; de = hl + 1
8E6F: ED B0                 ldir			; zero last len-1 bytes
                        done:
8E71: E1                    pop	    hl
8E72: D1                    pop	    de
8E73: C1                    pop	    bc
8E74: C9                    ret
                        #endlocal
                        
                        #include "libcode/divmod16.s"
                        ; (uint16_t quo (AC), uint16_t rem (HL)) divmod16(uint16_t n (AC), uint16_t d (DE))
                        ; - divides AC by DE and places the quotient in AC and the remainder in HL.
                        #local
                        divmod16::
8E75: 21 00 00              ld	    hl, 0
8E78: 06 10                 ld	    b, 16
                        loop:
8E7A: CB 31                 sll	    c
8E7C: 17                    rla
8E7D: ED 6A                 adc	    hl, hl
8E7F: ED 52                 sbc	    hl, de
8E81: 30 02                 jr	    nc, skip
8E83: 19                    add	    hl, de
8E84: 0D                    dec	    c
                        skip:    
8E85: 10 F3                 djnz    loop
8E87: C9                    ret
                        #endlocal
                        
                        #include "libcode/hex2bin.s"
                        ; uint8_t hex2bin(uint8_t ch)
                        ; - converts the hexadecimal character (0-9,A-F,a-f) in "ch" to a 4-bit value
                        ; - assumes that the character is a valid hex digit, upper or lower case
                        ; - pass "ch" in A
                        ; - returns in A
                        hex2bin::
8E88: D6 30                 sub     a, '0'
8E8A: FE 0A                 cp      10
8E8C: D8                    ret     c		    ; If we borrowed, then it's less than 10 and we're done
8E8D: D6 07                 sub     a, 'A'-'0'-10   ; Adjust for A-F
8E8F: E6 0F                 and     0x0F	    ; Handle lower case (has 0x20 OR'ed in)
8E91: C9                    ret
                        
                        #include "libcode/mul16.s"
                        ; uint32_t (DEHL) mul16(uint16_t a (DE), uint16_t, b (BC))
                        ; http://z80-heaven.wikidot.com/math#toc4
                        #local
                        mul16::
8E92: 21 00 00              ld      hl, 0
8E95: 3E 10                 ld      a, 16
                        loop:
8E97: 29                    add     hl, hl
8E98: CB 13                 rl      e
8E9A: CB 12                 rl      d
8E9C: 30 04                 jr      nc, skip
8E9E: 09                    add     hl, bc
8E9F: 30 01                 jr      nc, skip
8EA1: 13                    inc     de
                        skip:
8EA2: 3D                    dec     a
8EA3: 20 F2                 jr      nz, loop
8EA5: C9                    ret
                        #endlocal
                        
                        #include "libcode/print.s"
                            ; Print nul-terminated string at HL. Saves all registers.
                        #local
                        print::
8EA6: E5                    push hl
8EA7: D5                    push de
8EA8: F5                    push af
8EA9: 18 04                 jr print_check
                        print_loop:
8EAB: CD 33 00              call 0x0033
8EAE: 23                    inc hl
                        print_check
8EAF: 7E                    ld a,(hl)
8EB0: B7                    or a
8EB1: 20 F8                 jr nz,print_loop
8EB3: F1                    pop af
8EB4: D1                    pop de
8EB5: E1                    pop hl
8EB6: C9                    ret
                        #endlocal
                        
                        #include "libcode/print_newline.s"
                            ; Print a newline/linefeed.
                        #local
                        print_newline::
8EB7: F5                    push af
8EB8: 3E 0D                 ld a,13
8EBA: CD 3A 03              call 0x033a
8EBD: F1                    pop af
8EBE: C9                    ret
                        #endlocal
                        
                        #include "libcode/putc_l.s"
                            ; Print the character in the L register.
                        #local
                        putc_l::
8EBF: F5                    push af
8EC0: D5                    push de
8EC1: 7D                    ld a,l
8EC2: CD 33 00              call 0x0033
8EC5: D1                    pop de
8EC6: F1                    pop af
8EC7: C9                    ret
                        #endlocal
                        
                        #include "libcode/rand16.s"
                        ; uint16_t rand16()
                        ; Inputs:
                        ;   (Rand16_seed1) contains a 16-bit seed value
                        ;   (Rand16_seed2) contains a NON-ZERO 16-bit seed value
                        ; Outputs:
                        ;   HL is the result
                        ;   BC, DE is preserved
                        ; Destroys:
                        ;   AF
                        ; cycle: 4,294,901,760 (almost 4.3 billion)
                        ; 160cc
                        ; 26 bytes
                        rand16::
8EC8: C5                    push bc
8EC9: 2A 9B D1              ld hl,(Rand16_seed1)
8ECC: 44                    ld b,h
8ECD: 4D                    ld c,l
8ECE: 29                    add hl,hl
8ECF: 29                    add hl,hl
8ED0: 2C                    inc l
8ED1: 09                    add hl,bc
8ED2: 22 9B D1              ld (Rand16_seed1),hl
8ED5: 2A 9D D1              ld hl,(Rand16_seed2)
8ED8: 29                    add hl,hl
8ED9: 9F                    sbc a,a
8EDA: E6 2D                 and %00101101
8EDC: AD                    xor l
8EDD: 6F                    ld l,a
8EDE: 22 9D D1              ld (Rand16_seed2),hl
8EE1: 09                    add hl,bc
8EE2: C1                    pop bc
8EE3: C9                    ret
                        
                        #include "libcode/rand16_modn.s"
                        ; uint16_t rand16_modn(uint16_t n)
                        ; - returns a 16-bit pseudo-random number on the interval [0, n) in HL
                        rand16_modn::
8EE4: C5                    push    bc
8EE5: D5                    push    de
8EE6: EB                    ex	    de, hl	; DE = n
8EE7: CD C8 8E              call    rand16	; HL = rand16()
8EEA: 7C                    ld	    a, h
8EEB: 4D                    ld	    c, l	; AC = HL (i.e. random value)
8EEC: CD 75 8E              call    divmod16	; (AC, HL) = divmod16(AC, DE)
8EEF: D1                    pop	    de
8EF0: C1                    pop	    bc
8EF1: C9                    ret
                        
                        #include "libcode/rand_init.s"
                        rand_init::
8EF2: E5                    push    hl
8EF3: 21 19 20              ld	    hl, 0x2019
8EF6: 22 9B D1              ld	    (Rand16_seed1), hl
8EF9: 21 5F A0              ld	    hl, 0xA05F
8EFC: 22 9D D1              ld	    (Rand16_seed2), hl
8EFF: E1                    pop	    hl
8F00: C9                    ret
                        
                        
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        ; data segment immediately follows code
                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                        
                        DATA:
                        ; define static variables here
                        Gets_buffer:: defs 100  ; input buffer for gets() routine
                        Gets_buffer_sz	equ $-Gets_buffer
                        
                        Forth_orig_sp:: defs 2  ; Save the calling program's SP.
                        Forth_dict:: defs 2     ; Pointer to dictionary linked list.
                        Forth_here:: defs 2     ; Pointer to next available space in Forth_code.
                        Forth_psp:: defs 2      ; Pointer into Forth_pstack.
                        Forth_input:: defs 2    ; Pointer to input buffer.
                        Forth_compiling:: defs 2 ; Whether compiling (vs. immediate mode). (Normally called STATE.)
                        Forth_orig_de:: defs 2  ; Temporary for saving DE.
                        Forth_orig_hl:: defs 2  ; Temporary for saving HL.
                        Forth_tmp1:: defs 2     ; Temporary.
                        Forth_tmp2:: defs 2     ; Temporary.
                        Forth_base:: defs 2     ; Current base for printing numbers.
                        Forth_word:: defs 32    ; Typical max length of Forth word.
                        Forth_code:: defs FORTH_CODE_SIZE
                        Forth_rstack:: defs FORTH_RSTACK_SIZE
                        Forth_pstack:: defs FORTH_PSTACK_SIZE
                        
                        #include library "libdata"
                        #include "libdata/Rand16_seed1.s"
                        Rand16_seed1:: defs 2	; seed value for rand16() routine
                        
                        #include "libdata/Rand16_seed2.s"
                        Rand16_seed2:: defs 2	; seed value for rand16() routine
                        
                        
                        DATA_size	equ $-DATA
                        
                            end init
                        
